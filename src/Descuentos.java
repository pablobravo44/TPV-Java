import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Pablo
 */
public class Descuentos extends javax.swing.JFrame {

    static DefaultTableModel modelo = new DefaultTableModel();
    
    public Descuentos() throws SQLException {
        initComponents();
        
        modelo = (DefaultTableModel) Tabla.getModel();
        Tabla.setModel(modelo);
        Tabla.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        cargarDescuentos();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Tabla = new javax.swing.JTable();
        btnModificar = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnBorrar = new javax.swing.JButton();
        btnAtras = new javax.swing.JButton();
        btnAddCategoria = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Descuentos");

        Tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nº Descuento", "% Descuento", "Artículo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(Tabla);

        btnModificar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnModificar.setText("MODIFICAR");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnAdd.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnAdd.setText("AÑADIR");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnBorrar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnBorrar.setText("BORRAR");
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });

        btnAtras.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnAtras.setText("ATRÁS");
        btnAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtrasActionPerformed(evt);
            }
        });

        btnAddCategoria.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnAddCategoria.setText("DESCONTAR CATEGORÍA COMPLETA");
        btnAddCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCategoriaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnAtras, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnModificar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnBorrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(btnAddCategoria, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnModificar, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                            .addComponent(btnAddCategoria, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(23, 23, 23)
                        .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(btnBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(btnAtras, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        
        try {
            modificar();
        } catch (SQLException ex) {
            Logger.getLogger(Descuentos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed

        add();
        try {
            cargarDescuentos();
        } catch (SQLException ex) {
            Logger.getLogger(Descuentos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed
    
        if (Tabla.getSelectedRow() == -1) {
            return;
            }
        String c = String.valueOf(modelo.getValueAt(Tabla.getSelectedRow(),0));
        int cod_descuento= Integer.parseInt(c);
        borrar(cod_descuento);
        try {
            cargarDescuentos();
        } catch (SQLException ex) {
            Logger.getLogger(Descuentos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnBorrarActionPerformed

    private void btnAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtrasActionPerformed

        Menu m = new Menu();
        m.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnAtrasActionPerformed

    private void btnAddCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCategoriaActionPerformed

        addCategoria();
        try {
            cargarDescuentos();
        } catch (SQLException ex) {
            Logger.getLogger(Descuentos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAddCategoriaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Descuentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Descuentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Descuentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Descuentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Descuentos().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(Descuentos.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    static void cargarDescuentos() throws SQLException{
       
        for (int i = 0; i < Tabla.getRowCount(); i++) {     //Borramos la tabla
            modelo.removeRow(i);
            i -= 1;
        }
        //Paso 1: Conectar con la base de datos
        if(BD.conexion != null) {
            System.out.println("Conexion realizada con éxito");
            }
        
        try{
        ResultSet rs = null;
        Statement sentencia = BD.conexion.createStatement();
        String sql = "SELECT * FROM descuento";
        rs = sentencia.executeQuery(sql);
        //Paso 3: Extrayendo los datos del resultset
        while(rs.next()) {
            //Recuperar datos por el nombre de la columna
            int cod_descuento = rs.getInt("cod_descuento");
            int descuento = rs.getInt("descuento");
            int cod_articulo = rs.getInt("cod_articulo");
            
            String nombre=nomArticulo(cod_articulo);
            modelo.addRow(new Object[]{ cod_descuento , descuento , nombre });
                
        }
            }
        catch (SQLException ex) {
            System.out.println("Error");
        }
    }
    static String nomArticulo(int cod){

        if (BD.conexion != null) {
            System.out.println("Conexion realizada con éxito");
        }
        String nom=null;
        try {
            String sql = "SELECT * FROM articulo where cod_articulo="+cod+";";
            System.out.println(sql);
            PreparedStatement stmt = BD.conexion.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery(sql);
            if (rs.next()) { //Para leer varias posibles filas se cambia el while por el if
                
                nom = rs.getString("nombre");
            }
        } catch (SQLException ex) {
            System.out.println("Error");
        }
        return nom;
    }   
    static int codArticulo(String nom){
        int cod=0;
        if (BD.conexion != null) {
            System.out.println("Conexion realizada con éxito");
        }
        try {
            String sql = "SELECT cod_articulo FROM articulo where nombre='"+nom+"';";
            System.out.println(sql);
            PreparedStatement stmt = BD.conexion.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery(sql);
            if (rs.next()) { //Para leer varias posibles filas se cambia el while por el if
                
                cod = rs.getInt("cod_articulo");
            }
        } catch (SQLException ex) {
            System.out.println("Error");
        }
        return cod;
    }
    static void modificar() throws SQLException{
        if (Tabla.getSelectedRow() == -1) {
            return;
            }
        int descuento=0;
        while(true){
        String d = JOptionPane.showInputDialog(null,"Introduce un descuento(1-100)", "" );
        descuento=Integer.parseInt(d);
        if(descuento<1 || descuento>100){
            continue;
            }
        else{
            break;
            }
        }
        String nombre = String.valueOf(modelo.getValueAt(Tabla.getSelectedRow(),2));
        System.out.println(nombre);
        int codigo=codArticulo(nombre);
        modificarBD(codigo,descuento);
        cargarDescuentos();
    }
    static void modificarBD(int articulo, int descuento){
        //Paso 1: Conectar con la base de datos
        if (BD.conexion != null) {
            System.out.println("Conexion realizada con éxito");
        }
        //Paso 2: Ejecutar una consulta
        try {
            String sql = "update descuento set descuento = "+descuento+" where cod_articulo = " +articulo + ";";
            PreparedStatement pstmt = BD.conexion.prepareStatement(sql);
            pstmt.executeUpdate();
        } catch (SQLException ex) {
            System.out.println("Error" + ex);
        }
        String art = nomArticulo(articulo);
        Registro.addRegistro("El empleado "+InicioSesion.empleado.getNombre()+" "+InicioSesion.empleado.getApellido()+" modificó el descuento para "+art);
    }
    static void add(){
        int descuento=0;
        while(true){
        String d = JOptionPane.showInputDialog(null,"Introduce un descuento(1-100)", "" );
        descuento=Integer.parseInt(d);
        if(descuento<1 || descuento>100){
            continue;
            }
        else{
            break;
            }
        }
        ImageIcon icon = new ImageIcon();
        
        ArrayList<String> articulos = new ArrayList<String>();
        articulos=leerArticulos();
        
        String[] a = new String[articulos.size()];
        a = articulos.toArray(a);
        String art = (String) JOptionPane.showInputDialog(null, "Seleccione un artículo para descontar", "Descuento", JOptionPane.DEFAULT_OPTION, icon,a, a[0]);
        System.out.println(art);
        insertarDescuento(art,descuento);
    }
    static void insertarDescuento(String art, int descuento){
       
        int cod_articulo=codArticulo(art);

        //Paso 1: Conectar con la base de datos
        if (BD.conexion != null) {
            System.out.println("Conexion realizada con éxito");
        }
        //Paso 2: Ejecutar una consulta
        try {
                String sql = "delete from descuento where cod_articulo="+cod_articulo;   //Borramos el posible descuento de ese artículo
                PreparedStatement pstmt = BD.conexion.prepareStatement(sql);
                pstmt.executeUpdate();        
        } catch (SQLException ex) {
            System.out.println("Error" + ex);
        }
        
        int cod_descuento=numDescuento();
        
        //Paso 1: Conectar con la base de datos
        if (BD.conexion != null) {
            System.out.println("Conexion realizada con éxito");
        }
        //Paso 2: Ejecutar una consulta
        try {
            String sql = "INSERT INTO descuento values ("+cod_descuento+","+descuento+","+cod_articulo+");";    //Añadimos el descuento
            PreparedStatement pstmt = BD.conexion.prepareStatement(sql);
            pstmt.executeUpdate();
        } catch (SQLException ex) {
            System.out.println("Error" + ex);
        }
        
        Registro.addRegistro("El empleado "+InicioSesion.empleado.getNombre()+" "+InicioSesion.empleado.getApellido()+" ha añadido un descuento para "+art);
    }
    static ArrayList<String> leerArticulos(){
        
        ArrayList<String> articulos = new ArrayList<String>();
        //Paso 1: Conectar con la base de datos
        if (BD.conexion != null) {
            System.out.println("Conexion realizada con éxito");
        }
        //Paso 2: Ejecutar una consulta
        try {
            ResultSet rs = null;
            Statement sentencia = BD.conexion.createStatement();
            String sql = "SELECT * FROM articulo";
            rs = sentencia.executeQuery(sql);
            //Paso 3: Extrayendo los datos del resultset
            while (rs.next()) {
                //Recuperar datos por el nombre de la columna
                String nombre = rs.getString("nombre");
                articulos.add(nombre);
            } 
        }
         catch (SQLException ex) {
            System.out.println("Error");
        } 
        return articulos;
    }
    static int numDescuento(){
        //Paso 1: Conectar con la base de datos
        if (BD.conexion != null) {
            System.out.println("Conexion realizada con éxito");
        }
        int cod_descuento=0;
        try {
            String sql = "SELECT max(cod_descuento) FROM descuento";
            PreparedStatement stmt = BD.conexion.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery(sql);
            if (rs.next()) { //Para leer varias posibles filas se cambia el while por el if
                cod_descuento=rs.getInt("max(cod_descuento)");
            }
        } catch (SQLException ex) {
            System.out.println("Error");
        } 
        return cod_descuento+1;
    }
    static void borrar(int cod_descuento){
        //Paso 1: Conectar con la base de datos
        if (BD.conexion != null) {
            System.out.println("Conexion realizada con éxito");
        }
        //Paso 2: Ejecutar una consulta
        try {
            String sql = "delete from descuento where cod_descuento="+cod_descuento+";";
            PreparedStatement pstmt = BD.conexion.prepareStatement(sql);
            pstmt.executeUpdate();
        } catch (SQLException ex) {
            System.out.println("Error" + ex);
        }
        String art = nomArticulo(cod_descuento);       
        Registro.addRegistro("El empleado "+InicioSesion.empleado.getNombre()+" "+InicioSesion.empleado.getApellido()+" borró el descuento para "+art);
    }
    static void addCategoria(){
        int descuento=0;
        while(true){
        String d = JOptionPane.showInputDialog(null,"Introduce un descuento(1-100)", "" );
        descuento=Integer.parseInt(d);
        if(descuento<1 || descuento>100){
            continue;
            }
        else{
            break;
            }
        }
        ImageIcon icon = new ImageIcon();
        
        ArrayList<String> categorias = new ArrayList<String>();
        categorias=leerCategorias();
        
        String[] a = new String[categorias.size()];
        a = categorias.toArray(a);
        String cat = (String) JOptionPane.showInputDialog(null, "Seleccione una categoría para descontar", "Descuento", JOptionPane.DEFAULT_OPTION, icon,a, a[0]);
        System.out.println(cat);
        
        insertarDescuentosCat(cat,descuento);
    }
    static ArrayList<String> leerCategorias(){
        
        ArrayList<String> categorias = new ArrayList<String>();
        //Paso 1: Conectar con la base de datos
        if (BD.conexion != null) {
            System.out.println("Conexion realizada con éxito");
        }
        //Paso 2: Ejecutar una consulta
        try {
            ResultSet rs = null;
            Statement sentencia = BD.conexion.createStatement();
            String sql = "SELECT * FROM categoria";
            rs = sentencia.executeQuery(sql);
            //Paso 3: Extrayendo los datos del resultset
            while (rs.next()) {
                //Recuperar datos por el nombre de la columna
                String nombre = rs.getString("nombre");
                categorias.add(nombre);
            } 
        }
         catch (SQLException ex) {
            System.out.println("Error");
        } 
        return categorias;
    }
    static void insertarDescuentosCat(String cat, int descuento){
        
        int cod_categoria=0;
        
        if (BD.conexion != null) {                              //Sacamos el cod_categoria con el nombre(en la variable cat)
            System.out.println("Conexion realizada con éxito");
        }
        try {
            String sql = "Select cod_categoria from categoria where nombre='"+cat+"';";
            PreparedStatement stmt = BD.conexion.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery(sql);
            if (rs.next()) { //Para leer varias posibles filas se cambia el while por el if
                cod_categoria=rs.getInt("cod_categoria");
            }
        } catch (SQLException ex) {
            System.out.println("Error" + ex);
        }
        System.out.println("El código de la categoría es: "+cod_categoria);
        ArrayList<Integer> codigosArt = new ArrayList<Integer>();
        
        //Paso 1: Conectar con la base de datos
        if (BD.conexion != null) {
            System.out.println("Conexion realizada con éxito");
        }
        //Paso 2: Ejecutar una consulta
        try {
            ResultSet rs = null;
            Statement sentencia = BD.conexion.createStatement();
            String sql = "SELECT * FROM articulo where articulo.cod_categoria=" + cod_categoria;
            rs = sentencia.executeQuery(sql);
            //Paso 3: Extrayendo los datos del resultset
            while (rs.next()) {
                //Recuperar datos por el nombre de la columna
                codigosArt.add(rs.getInt("cod_articulo"));                          //Añadimos al arraylist codigosArt los códigos de todos los artículos de la categoría
                
            }
        } catch (SQLException ex) {
            System.out.println("Error");
        }

        //Paso 1: Conectar con la base de datos
        if (BD.conexion != null) {
            System.out.println("Conexion realizada con éxito");
        }
        //Paso 2: Ejecutar una consulta
        try {
            for(int i=0;i<codigosArt.size();i++){
                String sql = "delete from descuento where cod_articulo="+codigosArt.get(i);   //Borramos todos los posibles descuentos de ese artículo
                PreparedStatement pstmt = BD.conexion.prepareStatement(sql);
                pstmt.executeUpdate();        
            }
        } catch (SQLException ex) {
            System.out.println("Error" + ex);
        }        
        
        //Paso 1: Conectar con la base de datos
        if (BD.conexion != null) {
            System.out.println("Conexion realizada con éxito");
        }
        //Paso 2: Ejecutar una consulta
        try {
            for(int i=0;i<codigosArt.size();i++){
                int cod_descuento=numDescuento();                   //Añadimos el descuento para TODOS los artículos cuyos codigos hemos guardado en el array
                String sql = "INSERT INTO descuento values ("+cod_descuento+","+descuento+","+codigosArt.get(i)+");";
                PreparedStatement pstmt = BD.conexion.prepareStatement(sql);
                pstmt.executeUpdate();        
            }
        } catch (SQLException ex) {
            System.out.println("Error" + ex);
        }
        Registro.addRegistro("El empleado "+InicioSesion.empleado.getNombre()+" "+InicioSesion.empleado.getApellido()+" insertó un descuento para toda la categoría "+cat);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JTable Tabla;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAddCategoria;
    private javax.swing.JButton btnAtras;
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
