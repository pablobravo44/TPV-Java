//Pablo Bravo Villanueva
import Objetos.LineadeFactura;
import Objetos.Articulo;
import Objetos.Categoria;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Color;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Pablo
 */
public class Ventas extends javax.swing.JFrame {

    static DefaultListModel modeloListaArt = new DefaultListModel();
    static DefaultListModel modeloListaCat = new DefaultListModel();
    static DefaultTableModel modeloTabla = new DefaultTableModel();  

    static ArrayList<LineadeFactura> lineasfactura = new ArrayList<LineadeFactura>();

    public Ventas() {
        initComponents();

        leerCategorias();   //Cargamos las categorías en el modelo de la Lista de Categorías

        numFactura();       //Comprobamos el nº de factura que toca en la BD y lo añadimos al label
        txtNombreEmpleado.setText(InicioSesion.empleado.getNombre() + " " + InicioSesion.empleado.getApellido());   //Añadimos al label el nombre del empleado con el que nos hemos logeado
        
        listaArt.setModel(modeloListaArt);
        listaCat.setModel(modeloListaCat);

        modeloTabla = (DefaultTableModel) Tabla.getModel();
        Tabla.setModel(modeloTabla);
        Tabla.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        btnAceptar.setEnabled(false);       //Al inicar el botón de aceptar está deshabilitado(porque hay 0 líneas de factura)
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaArt = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        listaCat = new javax.swing.JList<>();
        textoCantidad = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        Tabla = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        textoNumFactura = new javax.swing.JTextField();
        btnAceptar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtStock = new javax.swing.JTextField();
        lblImg = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtNombreEmpleado = new javax.swing.JTextField();
        btnDeshacer = new javax.swing.JButton();
        btnQuitar = new javax.swing.JButton();
        btnBorrarTodas = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtBaseImponible = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtTotal = new javax.swing.JTextField();
        btnNueva = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        txtPrecio = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtIva = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtDescuento = new javax.swing.JTextField();
        btnAtras = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Terminal de Ventas");
        setBackground(new java.awt.Color(0, 0, 0));
        setResizable(false);

        listaArt.setModel(new javax.swing.DefaultListModel());
        listaArt.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listaArt.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listaArtValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listaArt);

        listaCat.setModel(new javax.swing.DefaultListModel());
        listaCat.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listaCat.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listaCatValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(listaCat);

        textoCantidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textoCantidadKeyPressed(evt);
            }
        });

        btnAdd.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnAdd.setText("Añadir");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        Tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Artículo", "Cantidad", "Precio", "% Descuento", "Base Imponible", "% IVA", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(Tabla);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Factura nº");

        textoNumFactura.setEditable(false);

        btnAceptar.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnAceptar.setText("ACEPTAR");
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("STOCK");

        txtStock.setEditable(false);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText("Empleado");

        txtNombreEmpleado.setEditable(false);

        btnDeshacer.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnDeshacer.setText("DESHACER");
        btnDeshacer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeshacerActionPerformed(evt);
            }
        });

        btnQuitar.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnQuitar.setText("QUITAR");
        btnQuitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitarActionPerformed(evt);
            }
        });

        btnBorrarTodas.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnBorrarTodas.setText("BORRAR TODAS");
        btnBorrarTodas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarTodasActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("BASE IMP.");

        txtBaseImponible.setEditable(false);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("TOTAL");

        txtTotal.setEditable(false);

        btnNueva.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnNueva.setText("NUEVA");
        btnNueva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevaActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("PRECIO");

        txtPrecio.setEditable(false);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("IVA");

        txtIva.setEditable(false);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("DESCUENTO");

        txtDescuento.setEditable(false);

        btnAtras.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnAtras.setText("ATRÁS");
        btnAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtrasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(10, 10, 10)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtNombreEmpleado, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                                            .addComponent(textoNumFactura))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                                        .addGap(40, 40, 40))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGap(68, 68, 68)
                                        .addComponent(txtStock, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(63, 63, 63)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel8)
                                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtIva, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtTotal, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                                    .addComponent(txtBaseImponible)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtDescuento, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblImg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(textoCantidad)
                                    .addComponent(btnAceptar, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnNueva, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                                    .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(btnDeshacer, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnQuitar, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnBorrarTodas)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAtras)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtNombreEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtPrecio, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtStock, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDescuento, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtIva, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel9))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 41, Short.MAX_VALUE)
                                .addComponent(jLabel7)
                                .addGap(230, 230, 230))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(textoNumFactura, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(txtBaseImponible, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(lblImg, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnAdd)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(textoCantidad)
                                .addGap(3, 3, 3)))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAceptar)
                            .addComponent(btnNueva))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDeshacer)
                    .addComponent(btnQuitar)
                    .addComponent(btnBorrarTodas)
                    .addComponent(btnAtras))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed

        if (listaArt.isSelectionEmpty()) {
            JOptionPane.showMessageDialog(null, "Debes seleccionar un producto", "ERROR", JOptionPane.WARNING_MESSAGE);
            return;
        }

        Articulo a = (Articulo) modeloListaArt.get(listaArt.getSelectedIndex());

        if (a.getStock() == 0) {
            JOptionPane.showMessageDialog(null, "No puedes añadir un producto que no tiene Stock", "ERROR", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (!(textoCantidad.getText().matches("\\d+"))) {
            JOptionPane.showMessageDialog(null, "Numero de cantidad no valido", "ERROR", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (Integer.parseInt(textoCantidad.getText()) > a.getStock()) {
            String b = textoCantidad.getText();
            int s = a.getStock();
            String m = "Este producto solo tiene " + s + " unidades disponibles, no puedes añadir " + b + " unidades";
            JOptionPane.showMessageDialog(null, m, "ERROR", JOptionPane.WARNING_MESSAGE);
            return;
        }
        for (int i = 0; i < Tabla.getRowCount(); i++) {
            if (lineasfactura.get(i).getArticulo().getCodigo() == a.getCodigo()) {
                if (a.getStock() < (Integer.parseInt(textoCantidad.getText()) + lineasfactura.get(i).getCantidad())) {
                    JOptionPane.showMessageDialog(null, "No puedes añadir este producto, no hay stock suficiente contando lo ya añadido", "ERROR", JOptionPane.WARNING_MESSAGE);
                    return;
                }
            }
        }
        int descuento = numDescuento(a.getCodigo());

        double des = (double) 100 - descuento; //Guardamos en des el valor de 100-descuento, por ejemplo 100-30 y guardamos 70

        double precioporcantidad = a.getPrecio() * Integer.parseInt(textoCantidad.getText());
        double total;

        if (descuento == 0) {
            total = precioporcantidad;
        } else {
            total = (precioporcantidad * des) / 100;
        }
        int iva = numIVA(a.getCodigo());

        double d = (double) iva / 100;
        double IVAd = (double) 1 + d;
        double totalIVA = total * IVAd;

        modeloTabla.addRow(new Object[]{a.getNombre(), Integer.parseInt(textoCantidad.getText()), a.getPrecio(), descuento, total, a.getProcentaje_iva(), totalIVA});
        lineasfactura.add(new LineadeFactura(1, Integer.parseInt(textoNumFactura.getText()), a, Integer.parseInt(textoCantidad.getText()), descuento, total, totalIVA));
        modeloListaArt.clear();
        leerArticulos();
        listaArt.setSelectedIndex(0);
        cambiarTotales();
        btnAceptar.setEnabled(true);
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed

        if(modeloTabla.getRowCount()==0){
            return;
        }
        crearFacturaPDF();      //Crea la factura correspondiente en pdf
        crearFacturaCSV();
        addFactura();           //Añade la BD todos los datos de la factura(incluido el archivo)

        addLineasFactura();
        reducirStock();
        Registro.addRegistro("El empleado " + InicioSesion.empleado.getNombre() + " " + InicioSesion.empleado.getApellido() + " ha realizado la factura nº " + Integer.parseInt(textoNumFactura.getText()));
        btnAceptar.setEnabled(false);
        btnAdd.setEnabled(false);
        btnDeshacer.setEnabled(false);
        btnQuitar.setEnabled(false);
        btnBorrarTodas.setEnabled(false);
    }//GEN-LAST:event_btnAceptarActionPerformed

    private void btnDeshacerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeshacerActionPerformed
        if (modeloTabla.getRowCount() == 0) {
            return;
        }
        lineasfactura.remove(modeloTabla.getRowCount() - 1);
        modeloTabla.removeRow(modeloTabla.getRowCount() - 1);
        cambiarTotales();
        if(modeloTabla.getRowCount()==0){
            btnAceptar.setEnabled(false);
        }
    }//GEN-LAST:event_btnDeshacerActionPerformed

    private void btnQuitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitarActionPerformed
        if (Tabla.getSelectedRow() == -1) {
            return;
        }
        lineasfactura.remove(Tabla.getSelectedRow());
        modeloTabla.removeRow(Tabla.getSelectedRow());
        cambiarTotales();
        if(modeloTabla.getRowCount()==0){
            btnAceptar.setEnabled(false);
        }
    }//GEN-LAST:event_btnQuitarActionPerformed

    private void btnBorrarTodasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarTodasActionPerformed

        modeloTabla.setRowCount(0);
        lineasfactura.clear();
        cambiarTotales();
        btnAceptar.setEnabled(false);
    }//GEN-LAST:event_btnBorrarTodasActionPerformed

    private void btnNuevaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevaActionPerformed
        numFactura();
        for (int i = 0; i < Tabla.getRowCount(); i++) {
            modeloTabla.removeRow(i);
            i -= 1;
        }
        textoCantidad.setText("");
        txtBaseImponible.setText("");
        txtTotal.setText("");
        listaCat.setSelectedIndex(0);
        listaArt.setSelectedIndex(0);
        btnAceptar.setEnabled(true);
        btnAdd.setEnabled(true);
        btnDeshacer.setEnabled(true);
        btnQuitar.setEnabled(true);
        btnBorrarTodas.setEnabled(true);
    }//GEN-LAST:event_btnNuevaActionPerformed

    private void textoCantidadKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textoCantidadKeyPressed

        if (evt.getKeyCode() == 10) {
            if (listaArt.isSelectionEmpty()) {
                JOptionPane.showMessageDialog(null, "Debes seleccionar un producto", "ERROR", JOptionPane.WARNING_MESSAGE);
                return;
            }

            Articulo a = (Articulo) modeloListaArt.get(listaArt.getSelectedIndex());

            if (a.getStock() == 0) {
                JOptionPane.showMessageDialog(null, "No puedes añadir un producto que no tiene Stock", "ERROR", JOptionPane.WARNING_MESSAGE);
                return;
            }
            if (!(textoCantidad.getText().matches("\\d+"))) {
                JOptionPane.showMessageDialog(null, "Numero de cantidad no valido", "ERROR", JOptionPane.WARNING_MESSAGE);
                return;
            }
            if (Integer.parseInt(textoCantidad.getText()) > a.getStock()) {
                String b = textoCantidad.getText();
                int s = a.getStock();
                String m = "Este producto solo tiene " + s + " unidades disponibles, no puedes añadir " + b + " unidades";
                JOptionPane.showMessageDialog(null, m, "ERROR", JOptionPane.WARNING_MESSAGE);
                return;
            }
            for (int i = 0; i < Tabla.getRowCount(); i++) {
                if (lineasfactura.get(i).getArticulo().getCodigo() == a.getCodigo()) {
                    if (a.getStock() < (Integer.parseInt(textoCantidad.getText()) + lineasfactura.get(i).getCantidad())) {
                        JOptionPane.showMessageDialog(null, "No puedes añadir este producto, no hay stock suficiente contando lo ya añadido", "ERROR", JOptionPane.WARNING_MESSAGE);
                        return;
                    }
                }
            }
            int descuento = numDescuento(a.getCodigo());

            double des = (double) 100 - descuento; //Guardamos en des el valor de 100-descuento, por ejemplo 100-30 y guardamos 70

            double precioporcantidad = a.getPrecio() * Integer.parseInt(textoCantidad.getText());
            double total;

            if (descuento == 0) {
                total = precioporcantidad;
            } else {
                total = (precioporcantidad * des) / 100;
            }
            int iva = numIVA(a.getCodigo());

            double d = (double) iva / 100;
            double IVAd = (double) 1 + d;
            double totalIVA = total * IVAd;

            modeloTabla.addRow(new Object[]{a.getNombre(), Integer.parseInt(textoCantidad.getText()), a.getPrecio(), descuento, total, a.getProcentaje_iva(), totalIVA});
            lineasfactura.add(new LineadeFactura(1, Integer.parseInt(textoNumFactura.getText()), a, Integer.parseInt(textoCantidad.getText()), descuento, total, totalIVA));
            modeloListaArt.clear();
            leerArticulos();
            listaArt.setSelectedIndex(0);
            cambiarTotales();
            btnAceptar.setEnabled(true);
        }
    }//GEN-LAST:event_textoCantidadKeyPressed

    private void btnAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtrasActionPerformed

        if(Tabla.getRowCount()>0){
            if(JOptionPane.showConfirmDialog(null,"¿Seguro que quieres salir, tienes una factura a medias?")==JOptionPane.OK_OPTION){
                lineasfactura.clear();
                Menu m = new Menu();
                m.setVisible(true);
                this.setVisible(false);
            }
            else{
                return;
            }
        }
        else{
            lineasfactura.clear();
            Menu m = new Menu();
            m.setVisible(true);
            this.setVisible(false);
        }

    }//GEN-LAST:event_btnAtrasActionPerformed

    private void listaCatValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listaCatValueChanged

        modeloListaArt.clear();
        leerArticulos();
    }//GEN-LAST:event_listaCatValueChanged

    private void listaArtValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listaArtValueChanged

        
        if (listaArt.getSelectedIndex() == -1) {
            return;
        }
        Articulo a = (Articulo) modeloListaArt.get(listaArt.getSelectedIndex());
        int stock1 = a.getStock();
        int stock2 = 0;
        for (int i = 0; i < Tabla.getRowCount(); i++) {
            if (lineasfactura.get(i).getArticulo().getCodigo() == a.getCodigo()) {
                stock2 = stock2 + lineasfactura.get(i).getCantidad();
            }
        }
        int resultado = stock1 - stock2;
        txtStock.setText(resultado + "");
        txtPrecio.setText(a.getPrecio() + "");
        txtIva.setText(a.getProcentaje_iva() + "%");
        int d = numDescuento(a.getCodigo());
        txtDescuento.setText(d + "%");
        cambiarImg(a);
        textoCantidad.requestFocus();
    }//GEN-LAST:event_listaArtValueChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventas().setVisible(true);
            }
        });

    }

    static void numFactura() {
        //Paso 1: Conectar con la base de datos
        if (BD.conexion != null) {
            System.out.println("Conexion realizada con éxito");
        }
        //Paso 2: Ejecutar una consulta
        try {
            String sql = "SELECT max(cod_factura) FROM factura";
            PreparedStatement stmt = BD.conexion.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery(sql);
            if (rs.next()) { //Para leer varias posibles filas se cambia el while por el if
                textoNumFactura.setText((rs.getInt("max(cod_factura)") + 1) + "");
            }
        } catch (SQLException ex) {
            System.out.println("Error");
        }
    }

    static int numLineaFactura() {
        //Paso 1: Conectar con la base de datos
        int cod = 0;
        if (BD.conexion != null) {
            System.out.println("Conexion realizada con éxito");
        }
        //Paso 2: Ejecutar una consulta
        try {
            String sql = "SELECT max(cod_lineafactura) FROM lineafactura";
            PreparedStatement stmt = BD.conexion.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery(sql);
            if (rs.next()) { //Para leer varias posibles filas se cambia el while por el if
                cod = (rs.getInt("max(cod_lineafactura)") + 1);
            }
        } catch (SQLException ex) {
            System.out.println("Error");
        }
        return cod;
    }

    static int numEmpleado() {
        //Paso 1: Conectar con la base de datos
        int cod = 0;
        String[] p = txtNombreEmpleado.getText().split(" ");
        if (BD.conexion != null) {
            System.out.println("Conexion realizada con éxito");
        }
        //Paso 2: Ejecutar una consulta
        try {
            String sql = "SELECT cod_empleado FROM empleado where nombre='" + p[0] + "' AND apellido='" + p[1] + "';";
            System.out.println(sql);
            PreparedStatement stmt = BD.conexion.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery(sql);
            if (rs.next()) { //Para leer varias posibles filas se cambia el while por el if
                cod = (rs.getInt("cod_empleado"));
            }
        } catch (SQLException ex) {
            System.out.println("Error");
        }
        return cod;
    }

    static int numDescuento(int cod) {
        //Paso 1: Conectar con la base de datos
        int descuento = 0;
        String[] p = txtNombreEmpleado.getText().split(" ");
        if (BD.conexion != null) {
            System.out.println("Conexion realizada con éxito");
        }
        //Paso 2: Ejecutar una consulta
        try {
            String sql = "SELECT descuento FROM descuento where cod_articulo=" + cod;
            System.out.println(sql);
            PreparedStatement stmt = BD.conexion.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery(sql);
            if (rs.next()) { //Para leer varias posibles filas se cambia el while por el if
                descuento = (rs.getInt("descuento"));
            }
        } catch (SQLException ex) {
            System.out.println("Error");
        }
        return descuento;
    }

    static int numIVA(int cod) {
        //Paso 1: Conectar con la base de datos
        int iva = 0;
        String[] p = txtNombreEmpleado.getText().split(" ");
        if (BD.conexion != null) {
            System.out.println("Conexion realizada con éxito");
        }
        //Paso 2: Ejecutar una consulta
        try {
            String sql = "SELECT porcentaje_iva FROM articulo where cod_articulo=" + cod;
            System.out.println(sql);
            PreparedStatement stmt = BD.conexion.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery(sql);
            if (rs.next()) { //Para leer varias posibles filas se cambia el while por el if
                iva = (rs.getInt("porcentaje_iva"));
            }
        } catch (SQLException ex) {
            System.out.println("Error");
        }
        return iva;
    }

    static void leerArticulos() {
        if (listaCat.getSelectedIndex() == -1) {
            return;
        }
        //Paso 1: Conectar con la base de datos
        if (BD.conexion != null) {
            System.out.println("Conexion realizada con éxito");
        }
        //Paso 2: Ejecutar una consulta
        try {

            Categoria cat = (Categoria) modeloListaCat.get(listaCat.getSelectedIndex());
            int codcat = cat.getCodigo();
            ResultSet rs = null;
            Statement sentencia = BD.conexion.createStatement();
            String sql = "SELECT * FROM articulo where articulo.cod_categoria=" + codcat;
            rs = sentencia.executeQuery(sql);
            //Paso 3: Extrayendo los datos del resultset
            while (rs.next()) {
                //Recuperar datos por el nombre de la columna
                String codigo = rs.getString("cod_articulo");
                String nombre = rs.getString("nombre");
                String precio = rs.getString("precio");
                String stock = rs.getString("stock");
                String porcentaje_iva = rs.getString("porcentaje_iva");
                String cod_categoria = rs.getString("cod_categoria");
                byte[] img = rs.getBytes("imagen");
                //Ver valores
                modeloListaArt.addElement(new Articulo(Integer.parseInt(codigo), nombre, Double.parseDouble(precio), Integer.parseInt(stock), Integer.parseInt(porcentaje_iva), Integer.parseInt(cod_categoria), img));
            }
        } catch (SQLException ex) {
            System.out.println("Error");
        }
    }

    static void leerCategorias() {
        modeloListaCat.clear();
        //Paso 1: Conectar con la base de datos
        if (BD.conexion != null) {
            System.out.println("Conexion realizada con éxito");
        }
        //Paso 2: Ejecutar una consulta
        try {
            ResultSet rs = null;
            Statement sentencia = BD.conexion.createStatement();
            String sql = "SELECT * FROM categoria";
            rs = sentencia.executeQuery(sql);
            //Paso 3: Extrayendo los datos del resultset
            while (rs.next()) {
                //Recuperar datos por el nombre de la columna
                String codigo = rs.getString("cod_categoria");
                String nombre = rs.getString("nombre");
                //Añadir al modelo las categorías
                modeloListaCat.addElement(new Categoria(Integer.parseInt(codigo), nombre));
            }
        } catch (SQLException ex) {
            System.out.println("Error");
        }
    }

    static void addLineasFactura() {
        //Paso 1: Conectar con la base de datos
        int cod = numLineaFactura();
        if (BD.conexion != null) {
            System.out.println("Conexion realizada con éxito");
        }
        //Paso 2: Ejecutar una consulta
        try {
            String sql = "INSERT INTO lineafactura values(?, ?, ?, ?, ?, ?)";
            PreparedStatement pstmt = BD.conexion.prepareStatement(sql);

            for (int i = 0; i < modeloTabla.getRowCount(); i++) {
                pstmt.setInt(1, cod + i);
                pstmt.setInt(2, lineasfactura.get(i).getArticulo().getCodigo());
                pstmt.setInt(3, lineasfactura.get(i).getCantidad());
                pstmt.setDouble(4, lineasfactura.get(i).getArticulo().getPrecio());
                pstmt.setInt(5,lineasfactura.get(i).getDescuento());
                pstmt.setInt(6, Integer.parseInt(textoNumFactura.getText()));
                pstmt.executeUpdate();
            }
        } catch (SQLException ex) {
            System.out.println("Error" + ex);
        }
    }

    static void addFactura() {
        //Paso 1: Conectar con la base de datos
        if (BD.conexion != null) {
            System.out.println("Conexion realizada con éxito");
        }
        //Paso 2: Ejecutar una consulta
        try {
            File archivoPDF = new File("Factura" + textoNumFactura.getText() + ".pdf");
            
            byte[] pdf = new byte[(int) archivoPDF.length()];
            DataInputStream disPDF = new DataInputStream(new FileInputStream(archivoPDF));
            disPDF.readFully(pdf);  // cargar desde archvivo (en dis) a byte[] en pdfData
            disPDF.close();

            String sql = "INSERT INTO factura values ( ?, ?, ? , ? )";
            PreparedStatement pstmt = BD.conexion.prepareStatement(sql);
            Date f = new Date();
            pstmt.setInt(1, Integer.parseInt(textoNumFactura.getText()));
            pstmt.setTimestamp(2, new Timestamp(f.getTime()));
            pstmt.setInt(3, InicioSesion.empleado.getCodigo());
            pstmt.setBytes(4, pdf);
            pstmt.executeUpdate();
            
        } catch (SQLException ex) {
            System.out.println("Error ALGO ESTÁ MAL" + ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Ventas.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Ventas.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    static void reducirStock() {
        //Paso 1: Conectar con la base de datos
        int cod = numLineaFactura();
        if (BD.conexion != null) {
            System.out.println("Conexion realizada con éxito");
        }
        //Paso 2: Ejecutar una consulta
        try {
            for (int i = 0; i < lineasfactura.size(); i++) {
                String sql = "update articulo set stock = articulo.stock - " + lineasfactura.get(i).getCantidad() + " where articulo.cod_articulo = " + lineasfactura.get(i).getArticulo().getCodigo() + ";";
                PreparedStatement pstmt = BD.conexion.prepareStatement(sql);
                pstmt.executeUpdate();
            }
        } catch (SQLException ex) {
            System.out.println("Error" + ex);
        }
    }

    static void cambiarTotales() {
        if (lineasfactura.size() == 0) {
            txtBaseImponible.setText("");
            txtTotal.setText("");
            return;
        }
        double total = 0;
        double totalIVA = 0;

        for (int i = 0; i < lineasfactura.size(); i++) {
            total = total + lineasfactura.get(i).getTotal();
            totalIVA = totalIVA + lineasfactura.get(i).getTotalIVA();
        }
        txtBaseImponible.setText(String.format("%.2f", total));
        txtTotal.setText(String.format("%.2f", totalIVA));
    }

    static void cambiarImg(Articulo a) {
        ImageIcon icon = new ImageIcon(a.getImg());
        Icon fondo = new ImageIcon(icon.getImage().getScaledInstance(lblImg.getWidth(), lblImg.getHeight(), Image.SCALE_DEFAULT));
        lblImg.setIcon(fondo);
        lblImg.repaint();
    }

        static void crearFacturaPDF() {

        Document documento = new Document();
        FileOutputStream ficheroPdf;
        try {
            ficheroPdf = new FileOutputStream("Factura" + textoNumFactura.getText() + ".pdf");
            PdfWriter.getInstance(documento, ficheroPdf).setInitialLeading(20);
            /*
            * Se asocia el documento al OutputStream y se indica que el espaciado entre
            * lineas sera de 20. Esta llamada debe hacerse antes de abrir el documento
             */
            // Se abre el documento.
            documento.open();
            
            Date fechaActual = new Date();
            SimpleDateFormat formatoFecha = new SimpleDateFormat("dd/MM/yyyy HH:mm");
            String f = formatoFecha.format(fechaActual);
            
            documento.add(new Paragraph("FACTURA: " + textoNumFactura.getText() + "      Empleado: " + txtNombreEmpleado.getText() + "      Fecha: " + f + " \r \r",
                    FontFactory.getFont("Calibri", // fuente 
                            14, // tamaÃ±o 
                            Font.ITALIC, // estilo 
                            BaseColor.BLACK))); // color 
            documento.add(new Paragraph("Artículos: \r \r",
                    FontFactory.getFont("arial", // fuente 
                            22, // tamaÃ±o 
                            BaseColor.RED))); // color 
            documento.add(new Paragraph());
            PdfPTable tabla = new PdfPTable(5);
            tabla.addCell("Artículo");
            tabla.addCell("Cantidad");
            tabla.addCell("Precio");
            tabla.addCell("Descuento");
            tabla.addCell("Base imponible");

            for (LineadeFactura linea : lineasfactura) {
                tabla.addCell(linea.getArticulo().getNombre());
                tabla.addCell(linea.getCantidad() + "");
                tabla.addCell(linea.getArticulo().getPrecio() + "€");
                if (linea.getDescuento() != 0) {
                    tabla.addCell(linea.getDescuento() + "%");
                } else {
                    tabla.addCell("-");
                }
                tabla.addCell(linea.getTotal() + "€");
            }
            documento.add(tabla);
            documento.add(new Paragraph("Base imponible: " + txtBaseImponible.getText() + "€",
                    FontFactory.getFont("arial", // fuente 
                            22, // tamaÃ±o 
                            BaseColor.BLACK))); // color 
            documento.add(new Paragraph("Precio total: " + txtTotal.getText() + "€",
                    FontFactory.getFont("arial", // fuente 
                            22, // tamaÃ±o 
                            BaseColor.BLACK))); // color 
            documento.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Ventas.class.getName()).log(Level.SEVERE, null, ex);
        } catch (DocumentException ex) {
            Logger.getLogger(Ventas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    static void crearFacturaCSV() {
        final String sep = ",";
        final String enter = "\n";
        try {
            FileWriter fw = new FileWriter("Factura" + textoNumFactura.getText() + ".csv");

            fw.append("Nombre").append(sep);
            fw.append("Cantidad").append(sep);
            fw.append("Precio").append(sep);
            fw.append("% Descuento").append(sep);
            fw.append("Base imponible").append(sep);
            fw.append("% IVA").append(sep);
            fw.append("Total").append(enter);;
                                    
            for (LineadeFactura linea : lineasfactura) {

                fw.append(linea.getArticulo().getNombre()).append(sep);
                fw.append(linea.getCantidad() + "").append(sep);
                fw.append(linea.getArticulo().getPrecio() + "").append(sep);
                fw.append(linea.getDescuento() + "").append(sep);
                fw.append(linea.getTotal() + "").append(sep);
                fw.append(linea.getArticulo().getProcentaje_iva() + "").append(sep);
                fw.append(linea.getTotalIVA() + "").append(enter);
                
            }
            fw.append(enter);
            fw.append("Base imponible").append(sep);
            fw.append(txtBaseImponible.getText().replace(",",".")).append(enter);
            fw.append("Total").append(sep);
            fw.append(txtTotal.getText().replace(",",".")).append(enter);
            fw.flush();
            fw.close();
        } catch (IOException e) {
            // Error al crear el archivo, por ejemplo, el archivo 
            // está actualmente abierto.
            e.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JTable Tabla;
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAtras;
    private javax.swing.JButton btnBorrarTodas;
    private javax.swing.JButton btnDeshacer;
    private javax.swing.JButton btnNueva;
    private javax.swing.JButton btnQuitar;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private static javax.swing.JLabel lblImg;
    private static javax.swing.JList<String> listaArt;
    private static javax.swing.JList<String> listaCat;
    private static javax.swing.JTextField textoCantidad;
    private static javax.swing.JTextField textoNumFactura;
    private static javax.swing.JTextField txtBaseImponible;
    private static javax.swing.JTextField txtDescuento;
    private static javax.swing.JTextField txtIva;
    private static javax.swing.JTextField txtNombreEmpleado;
    private static javax.swing.JTextField txtPrecio;
    private static javax.swing.JTextField txtStock;
    private static javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables
}
